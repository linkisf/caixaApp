user  nginx;
worker_processes  auto;

events {
  worker_connections 1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Desempenho básico
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  server_tokens off;

  # Gzip simples (opcional)
  gzip on;
  gzip_types text/plain text/css application/javascript application/json image/svg+xml;
  gzip_min_length 1024;

  # Upstream do backend (nome do serviço no docker-compose)
  upstream backend_upstream {
    server backend:8000;
    keepalive 32;
  }

  server {
    listen 80;
    server_name _;

    # Raiz do site: aponta para onde o dist será montado no container
    root /usr/share/nginx/html;
    index index.html;

    # Arquivos estáticos: cache amigável
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
      expires 7d;
      add_header Cache-Control "public, max-age=604800, immutable";
      try_files $uri =404;
    }

    # Proxy da API para o backend
    location /api/ {
      proxy_pass http://backend_upstream/;
      proxy_http_version 1.1;

      # Cabeçalhos usuais
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # WebSocket (se usar algum dia)
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    # Fallback SPA: qualquer rota do app volta para index.html
    location / {
      try_files $uri $uri/ /index.html;
    }

    # Tamanho máximo de upload (se tiver formulários com arquivos)
    client_max_body_size 10m;
  }
}
