# Compose V2: não use a chave "version"
# Arquivo pensado para Windows + Docker Desktop + WSL2

networks:
  erpnet:

volumes:
  pgdata:
  pgadmin_data:

services:
  db:
    image: postgres:16-alpine
    container_name: erp_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # TZ opcional (ex.: America/Bahia). Para Alpine, instale tzdata via imagem custom se quiser.
      # TZ: America/Bahia
    volumes:
      - pgdata:/var/lib/postgresql/data
    # Não expor 5432 em produção; backend acessa pela rede interna
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erpnet
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      PGHOST: ${PGHOST}
      PGPORT: ${PGPORT}
      PGDATABASE: ${PGDATABASE}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PORT: ${BACKEND_PORT}
    expose:
      - "${BACKEND_PORT}"
    networks:
      erpnet:
        aliases:
          - backend         # garante que 'backend' resolva p/ este container
          - erp_backend     # e também 'erp_backend'
    restart: unless-stopped

  # Builder do frontend (Vite). Gera ./frontend/dist no host.
  frontend-builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
    container_name: erp_frontend_builder
    command: [ "sh", "-c", "echo 'Build concluido'; sleep 1" ]
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
    networks:
      - erpnet

  # Servidor web (nginx). Usamos Dockerfile custom para copiar nginx.conf
  nginx:
    build:
      context: ./nginx
      # ./nginx/Dockerfile deve conter:
      #   FROM nginx:1.27-alpine
      #   COPY nginx.conf /etc/nginx/nginx.conf
    container_name: erp_nginx
    depends_on:
      - backend
      - frontend-builder
    ports:
      - "${NGINX_HTTP_PORT}:80"   # defina NGINX_HTTP_PORT no .env (80 ou 8080)
      # - "443:443"               # habilite se configurar TLS no Dockerfile/nginx.conf
    volumes:
      # monta o build estático gerado pelo frontend-builder
      - ./frontend/dist:/usr/share/nginx/html:ro
      # não montamos nginx.conf via bind para evitar o problema file↔dir no Windows
    networks:
      - erpnet
    restart: unless-stopped

  # pgAdmin 4 para administrar o Postgres (acesso local por segurança)
  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: erp_pgadmin
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
      PGADMIN_CONFIG_LOGIN_BANNER: '"Acesso restrito. Uso autorizado apenas."'  # <- aspas duplas DENTRO de aspas simples
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: "20"
      GUNICORN_TIMEOUT: "120"

    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      # Bind local apenas: acesse em http://127.0.0.1:${PGADMIN_HTTP_PORT}
      - "127.0.0.1:${PGADMIN_HTTP_PORT}:80"
    networks:
      - erpnet
    restart: unless-stopped
